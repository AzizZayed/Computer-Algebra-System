@startuml
skinparam style strictuml

interface IMath {
    + {abstract} evaluate()
    + {abstract} derivative()
    + {abstract} simplified()
    + {abstract} isEquivalent()
}

interface IRepresentableMath {
    + {abstract} latex()
    + {abstract} stringify()
    + {abstract} text()
    + {abstract} explicitText()
}

abstract class Expression {
    + {abstract} equals()
    + {abstract} clone()
}

class Const {
    + {static} PI()
    + {static} E()
    + {static} PHI()
}
class Var {
    - symbol
}

abstract class UnaryFunction {}
abstract class NaryFunction {}

abstract class BracketFunction {
    - openBracket
    - closeBracket
}
abstract class TrigFunction {}
abstract class InverseTrigFunction {}

class Cos {}
class Sin {}
class Tan {}
class Cot {}
class Sec {}
class Csc {}
class ArcCos {}
class ArcSin {}
class ArcTan {}
class ArcCot {}
class ArcSec {}
class ArcCsc {}

class Abs {}
class Floor {}
class Ceil {}
class Round {}
class Sign {}
class Mod {}

class Log {}
class Ln {}
class Power {}
class Exp {}

class Sqrt {}
class Cbrt {}
class Root {}

class Min {}
class Max {}

class Operator {
    - symbol
}
class Sum {}
class Product {}
class Negate {}
class Divide {}

class ExpressionProperties {
    - name
    - shortName
    - order
}
enum ExpressionType {
    CONSTANT,
    VARIABLE,
    POWER,
    EXPONENTIAL,
    SQUARE_ROOT,
    CUBE_ROOT,
    ROOT,
    LOGARITHM,
    NATURAL_LOGARITHM,
    ABSOLUTE_VALUE,
    FLOOR,
    CEIL,
    ROUND,
    SIGN,
    MODULO,
    SIN, COS, TAN,
    COT, SEC, CSC,
    ARC_SIN, ARC_COS, ARC_TAN,
    ARC_COT, ARC_SEC, ARC_CSC,
    MIN, MAX,
    PRODUCT,
    SUM,
    DIVIDE,
    NEGATE
}

Expression --|> IRepresentableMath
Expression --|> IMath

Const --|> Expression
Var --|> Expression

UnaryFunction --|> Expression
NaryFunction --|> Expression

BracketFunction --|> UnaryFunction
TrigFunction --|> UnaryFunction
InverseTrigFunction --|> TrigFunction

Cos --|> TrigFunction
Sin --|> TrigFunction
Tan --|> TrigFunction
Cot --|> TrigFunction
Sec --|> TrigFunction
Csc --|> TrigFunction
ArcCos --|> InverseTrigFunction
ArcSin --|> InverseTrigFunction
ArcTan --|> InverseTrigFunction
ArcCot --|> InverseTrigFunction
ArcSec --|> InverseTrigFunction
ArcCsc --|> InverseTrigFunction

Abs --|> BracketFunction
Floor --|> BracketFunction
Ceil --|> BracketFunction
Round --|> BracketFunction
Sign --|> UnaryFunction
Mod --|> Expression

Log --|> Expression
Ln --|> Log
Power --|> Expression
Exp --|> Power

Root --|> Power
Sqrt --|> Root
Cbrt --|> Root

Min --|> NaryFunction
Max --|> NaryFunction

Operator --|> Expression
Sum --|> Operator
Product --|> Operator
Negate --|> UnaryFunction
Divide --|> Expression

ExpressionProperties ..> ExpressionType : type
Expression ..> ExpressionProperties : properties
Expression ..> Expression : parent

Divide ..> Expression : dividend
Divide ..> Expression : divisor

Mod ..> Expression : dividend
Mod ..> Expression : divisor

Log ..> Expression : base
Log ..> Expression : argument

Power ..> Expression : base
Power ..> Expression : exponent

UnaryFunction ..> Expression : argument

NaryFunction ..> "*" Expression : arguments
Operator ..> "*" Expression : arguments

@enduml